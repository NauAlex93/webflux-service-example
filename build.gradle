plugins {
    id 'java'
    id 'jacoco'
    id 'application'
    id 'org.sonarqube' version '2.7'
    id 'org.ajoberstar.grgit' version '2.3.0'
    id "com.palantir.docker" version "0.25.0"
    id 'org.springframework.boot' version '2.4.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

ext {
    jetbrainsAnnotationsVersion = '18.0.0'
    commonsIoVersion = '2.6'
    springBootVersion = '2.3.7.RELEASE'
    swaggerWebfluxVersion = '1.5.2'
    springCloudVersion = '2020.0.1'
}

repositories {
    if (System.env.BUILD_ENVIRONMENT == "webfluxExampleCLOUD") {
        maven { url "http://nexus0:8081/nexus/content/groups/maven-group/" }
    } else {
        maven {
            url "http://sbtatlas.sigma.webfluxExample.ru/nexus/content/groups/internal"
            credentials {
                if (System.env.BUILD_ENVIRONMENT == "SIGMA") {
                    username = System.getenv('ci_ci01661998_user')
                    password = System.getenv('ci_ci01661998_pass')
                } else {
                    username = "${mavenUser}"
                    password = "${mavenPassword}"
                }
            }
        }
        maven { url "http://sbtatlas.sigma.webfluxExample.ru/nexus/content/groups/public" }
        maven { url "http://nexus.sigma.webfluxExample.ru:8099/nexus/content/repositories/jcenter/" }
        maven { url "http://sbtatlas.sigma.webfluxExample.ru/nexus/content/repositories/central" }
        maven { url "http://sbtatlas.sigma.webfluxExample.ru/nexus/content/repositories/github_proxy" }
    }
}

group 'ru.fluxExample.ds'
version '1.18.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

bootJar {
    mainClassName = 'ru.fluxExample.ds.TemplateSelectorServiceApplication'
}

sourceSets {
    test {
        resources {
            srcDir 'samples/'
        }
    }
}

docker {
    name "${project.name}:${grgit.head().abbreviatedId}"
    files (bootJar.archivePath, "jrebel")
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}

task createDockerBuildContext(type: Copy) {
    from "${buildDir}/${libsDirName}/${bootJar.archiveName}", "Dockerfile"
    into ".build"
    rename "${bootJar.archiveName}", 'app.jar'
}

def buildNumber = System.getenv('BUILD_NUMBER')

springBoot {
    buildInfo {
        properties {
            additionalProperties = [
                    "git-commit-hash": "${grgit.head().abbreviatedId}",
                    "git-branch"     : "${grgit.branch.current().fullName}",
                    "git-committer"  : "${grgit.head().committer.email}",
                    "build-number"   : buildNumber == null ? "Not a Jenkins build" : buildNumber
            ]
        }
    }
}

def sonarCoverageExclusions = [
        "**/ru/fluxExample/ds/config/**",
        "**/ru/fluxExample/ds/dto/**",
        "**/ru/fluxExample/ds/exceptions/**",
        "**/ru/fluxExample/ds/props/**",
        "**/*Stub.java"
]

sonarqube {
    properties {
        property 'sonar.coverage.exclusions', sonarCoverageExclusions.join(',')
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation 'javax.validation:validation-api'

    implementation "org.springdoc:springdoc-openapi-webflux-ui:${swaggerWebfluxVersion}"
    implementation "org.springdoc:springdoc-openapi-security:${swaggerWebfluxVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation "org.springframework.security.oauth:spring-security-oauth2:${springBootVersion}"
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation "org.jetbrains:annotations:${jetbrainsAnnotationsVersion}"
    implementation "commons-io:commons-io:${commonsIoVersion}"
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'org.liquibase:liquibase-core'
    implementation "org.postgresql:postgresql"
    implementation "com.h2database:h2"

    implementation ('ru.fluxExample.ds:sds-project-manager-api:1.18.0-SNAPSHOT') {
        exclude group: 'ru.fluxExample.ds', module: 'sds-commons'
        exclude group: 'org.springframework.cloud'
        exclude group: 'org.springframework.boot'
        exclude group: 'org.projectlombok', module: 'lombok'
    }

    compileOnly 'org.projectlombok:lombok'
    compileOnly 'org.mapstruct:mapstruct:1.3.1.Final'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testCompile 'org.mapstruct:mapstruct:1.3.1.Final'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testImplementation 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.hamcrest:hamcrest'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'junit:junit'
    testImplementation "com.squareup.okhttp3:okhttp"
    testImplementation "com.squareup.okhttp3:mockwebserver"
    testImplementation "com.squareup.okhttp3:okhttp-tls"
    testImplementation "org.awaitility:awaitility"
}

application {
    mainClassName = 'ru.fluxExample.ds.TemplateSelectorServiceApplication'
}

test {
    useJUnitPlatform()
}
